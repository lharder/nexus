go.property( "speed", 0 )
go.property( "isLocalHero", false )

local vcontroller = require( "in.onscreen" )

local MSG_ON_FIRST_TICK = hash( "firsttick" )
local MSG_STICK 		= hash( "stick" )
local MSG_BUTTON 		= hash( "button" )

local LEFT = hash( "left" )
local RIGHT = hash( "right" )
local UP = hash( "up" )
local DOWN = hash( "down" )


local function btnPressed( self )
	local cnt = GAME.client.state:get( self.gid, "counter" ) or 0
	cnt = cnt + 1
	label.set_text( "#counter", cnt )
	GAME.client.state:put( self.gid, "counter", cnt )
end


local function vcontrol( self, action )
	if action.id == MSG_STICK then
		if action.released then
			-- keep direction, stop moving
			self.speed = 0
		else
			-- move in the desired direction
			if( math.abs( action.x ) > 0 ) or ( math.abs( action.y ) > 0 ) then 
				self.speed = self.maxSpeed
				self.dir.x = action.x
				self.dir.y = action.y	
			end
		end		

	elseif action.id == MSG_BUTTON then
		if action.pressed then self.buttons[ action.id ] = true end	
		if action.released then self.buttons[ action.id ] = false end	

		if self.cooldown < socket.gettime() then
			self.cooldown = socket.gettime() + .3
			btnPressed( self )
		end
	end
end


local function parse( self, message )
	-- if message.meta.type == Events.MOVE_TO then
	-- end
end


--------------------
function init( self )
	self.cid = go.get_id()
	self.dir = vmath.vector3()
	self.maxSpeed = self.speed

	-- GAME.client.state:put( self.gid, "counter", 0 )
	self.cooldown = 0

	-- important: user input only from the one per host / right client!
	if self.isLocalHero then 
		-- listen to keyboard 
		msg.post( ".", "acquire_input_focus" ) 

		-- set me up as listener for virtual touch controller
		msg.post( "vcontroller", "register" )
		
		-- state of virtual buttons: pressed/not?
		self.buttons = {}
	end

	msg.post( ".", MSG_ON_FIRST_TICK )
end


function update( self, dt )
	self.pos = go.get_position()
	self.oldPos = go.get_position()
	
	if self.isLocalHero then 
		self.pos.x = self.pos.x + self.dir.x * self.speed * dt
		self.pos.y = self.pos.y + self.dir.y * self.speed * dt
		go.set_position( self.pos )

	else
		if not GAME.client.registry:isSyncFrame( self.cid ) then
			self.dir = vmath.normalize( self.oldPos - self.pos )
			if tostring( self.dir.x ) == "nan" then self.dir = vmath.vector3( 0, 0, 0 ) end
			
			self.pos.x = self.pos.x + self.dir.x * self.speed * dt
			self.pos.y = self.pos.y + self.dir.y * self.speed * dt
			
			go.set_position( self.pos )
		end
	end
	
	-- use distributed hashtable to store each gameobject's global state
	if self.cnt ~= GAME.client.state:get( self.gid, "counter" ) then 
		self.cnt = GAME.client.state:get( self.gid, "counter" ) or 0
		label.set_text( "#counter", self.cnt )
	end
end


function on_message( self, message_id, message, sender )
	if message_id == MSG_ON_FIRST_TICK then 
		-- get my global id, does not work on init()
		-- cannot pass in string params on factory.create...
		self.gid = GAME.client.registry:getGlobalId( go.get_id() )

	elseif message_id == vcontroller.ANALOG then 
		vcontrol( self, message )

	elseif message_id == vcontroller.BUTTON then 
		vcontrol( self, message )

	elseif message_id == GAME.MSG_EXEC_CMD then 
		parse( self, message )
	end
end
