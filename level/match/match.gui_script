local defgui = require( "defgui.defgui" )

local MSG_SCREEN_LOADED = hash( "screenmaster:loaded" )


function display( self )
	local x = -190
	local y = 450
	
	-- display a checkbox for each callsign
	for _, callsign in ipairs( GAME.hosts:keys() ) do
		-- calc position
		x = x + 240
		if x > 900 then
			x = -190
			y = y - 50
		end
				
		-- does a checkbox exist already?
		local checkbox = self.form.fields[ callsign ] 
		if checkbox == nil then
			checkbox = self.form:addCheckbox( callsign, x, y,
				function() 
				end, 
				callsign 
			)
			checkbox:check( true )
		end
	end
end


local function getCheckedCallsigns( self )
	local callsigns = {}
	for id, field in pairs( self.form.fields ) do
		-- only checkboxes have this method...
		if field.isChecked and field:isChecked() then
			table.insert( callsigns, field.caption )
		end
	end
	return callsigns
end


function broadcast( self, callsign )
	self.player = self.form:addLabel( "callsign", 50, 550, 500, 40, nil, callsign .. ", select your co-players:" )

	self.start = self.form:addButton( "play", 750, 550, 200, 48, 
		function() 
			pprint( "Clicked start button...!" ) 
			local callsigns = getCheckedCallsigns( self )
			local match = GAME:newMatch( unpack( callsigns ) )
			pprint( match:toString() )
			
			match:propose( function() 
				pprint( "All selected players confirmed, let's rock!!!" )
				msg.post( "main:/screenmaster", "load", { level = "/playground" } )
			end )
		end, 
		"Start" 
	)

	GAME:broadcast( callsign, function( host ) 
		if host == nil then return end
		pprint( "Found host: " .. host:tostring() )

		GAME:addHost( host )
		display( self )
	end )
end



function init( self )
	msg.post( ".", "acquire_input_focus" )
	msg.post( "@render:", "use_fixed_fit_projection", { near = -1, far = 1 } )

	self.form = defgui.createForm( "callsigns", { 
		button = "button/root",  
		checkbox = "checkbox/root",  
		label = "label/root",
	})

end


function on_input( self, action_id, action )
	if self.form then 
		self.form:input( self, action_id, action ) 
	end 
end


function update( self, dt )
	GAME:update()
end


function on_message( self, message_id, message, sender )
	if message_id == MSG_SCREEN_LOADED then
		-- receive the player's callsign from the previous screen
		-- use it to start broadcasting and searching for peers
		if message ~= nil then broadcast( self, message.callsign ) end
	end
end