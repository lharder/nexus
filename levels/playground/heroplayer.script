go.property( "dir", vmath.vector3() )
go.property( "speed", 30.0 )

local Commands = require( "nexus.commands" )

local ACTION_TOUCH = hash( "touch" )



local function pickNewTarget( self )
	local target = go.get_position()

	target.x = target.x + math.random( -50, 50 )
	if target.x > 400 then target.x = 400 end
	if target.x < 50 then target.x = 50 end

	target.y = target.y + math.random( -50, 50 )
	if target.y > 600 then target.y = 600 end
	if target.y < 100 then target.y = 100 end
	return target
end


local function equals( v1, v2 )
	return (
	math.abs( v1.x - v2.x ) < 1 and
	math.abs( v1.y - v2.y ) < 1
)
end



local function onInit( self, params )
	msg.post( ".", "acquire_input_focus" )

	label.set_text( "#callsign", params.callsign .. " (Player)" )

	go.set( ".", "euler.z", 0 )
	self.target = pickNewTarget( self )

	self.nextinput = socket.gettime()

	timer.delay( 1, false, function() 
		local gid = puppeteer:getGid( go.get_id() )
		local cmd = Commands.newMessage( gid, "my-cust-msg", { foo = "Bar!" } )
		puppeteer:sendToOthers( cmd )
	end )
	
end


local function onUpdate( self, dt )
	self.pos = go.get_position()
	if equals( self.target, self.pos ) then
		self.target = pickNewTarget( self )
	else
		self.dir = vmath.normalize( self.target - self.pos )
		self.pos = self.pos + self.dir * self.speed * dt
		go.set_position( self.pos )

		-- animate according to direction
		local newanim = ""
		if math.abs( self.dir.x ) > math.abs( self.dir.y ) then 
			if self.dir.x > 0 then 
				newanim = "walkright" 
			else
				newanim = "walkleft" 
			end
		else
			if self.dir.y > 0 then 
				newanim = "walkback" 
			else
				newanim = "walkfront" 
			end
		end	

		-- only send if a change has occurred
		if self.anim ~= newanim then 
			puppeteer:animate( msg.url( nil, go.get_id(), "sprite" ), newanim )
			self.anim = newanim
		end	

		-- play random sound
		-- local r = math.random( 0, 99 )
		-- if r == 99 then puppeteer:soundPlay( 
		--		msg.url( nil, go.get_id(), "sound" ) 
		-- ) end
	end
end


local function onInput( self, action_id, action )
	if( ( action_id == ACTION_TOUCH ) and ( self.nextinput < socket.gettime() ) ) then
		self.nextinput = socket.gettime() + .5

		local deg = go.get( ".", "euler.z" )
		deg = deg + math.random( -90, 90 )
		go.animate( ".", "euler.z", go.PLAYBACK_ONCE_FORWARD, deg, go.EASING_LINEAR, 1.5 )
	end
end


local function onMessage( self, message_id, message, sender )
end



-------------------------------------------------------------------
-- prevent game logic from acting out before init data is available
-------------------------------------------------------------------
function init( self )
	self.update = function() end
	self.on_message = function() end
	self.on_input = function() end
end

function update( self, dt ) self.update( self, dt ) end

function on_input( self, action_id, action ) self.on_input( self, action_id, action ) end

function on_message( self, message_id, message, sender )
	if message_id == hash( "init" ) then
		onInit( self, message )
		self.update = onUpdate
		self.on_message = onMessage
		self.on_input = onInput
	else
		self.on_message( self, message_id, message, sender )
	end	
end

