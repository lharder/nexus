local defgui = require( "defgui.defgui" )
local nexus = require( "main.gameserver" )

local MSG_SCREEN_LOADED = hash( "screenmaster:loaded" )

local x = 50
local y = 450


local function clearCheckboxes( form )
	if form == nil then return end 
	
	for ipPort, contact in pairs( nexus.contacts ) do
		form:remove( ipPort )
	end
	x = 50
	y = 450
end


local function display( self, contacts )
	-- display a checkbox for each callsign
	local me = nexus:me()
	for ipPort, contact in pairs( contacts ) do
		local callsign = contact.profile.callsign 

		-- does a checkbox exist already? Have we received profile info already?
		-- At first, only ip:port are known: must not display checkbox yet.
		local checkbox = self.form.fields[ ipPort ] 
		if checkbox == nil and ( callsign ~= nil ) then
			checkbox = self.form:addCheckbox( ipPort, x, y, function( guiSelf, field, action_id, action ) 
				if field.caption == me.profile.callsign then
					pprint( "That is myself! Cannot play without me....!" ) 
					field:check( true )
				end
			end, 
			callsign )
			
			checkbox:check( true )
			checkbox.profile = contact.profile

			-- calculate new position
			x = x + 240
			if x > 900 then
				x = 50
				y = y - 50
			end
		end
	end
end


local function getCheckedProfiles( self )
	local profiles = {}
	for id, field in pairs( self.form.fields ) do
		-- only checkboxes have this method...
		if field.isChecked and field:isChecked() then
			profiles[ field.profile.id ] = field.profile
		end
	end
	return profiles
end


-- methods -----------------------
function init( self )
	msg.post( ".", "acquire_input_focus" )
	msg.post( "@render:", "use_fixed_fit_projection", { near = -1, far = 1 } )

	self.form = defgui.createForm( "callsigns", { 
		button = "button/root",  
		checkbox = "checkbox/root",  
		label = "label/root",
	})
	
	self.form.remove = function( self, id ) 
		local field = self.fields[ id ]
		if field then 
			gui.delete_node( field.rootNode )
			self.fields[ id ] = nil
		end
	end
end


function on_message( self, message_id, message, sender )
	if message_id == MSG_SCREEN_LOADED then
		-- receive the player's callsign from the previous screen
		-- use it to start broadcasting and searching for peers
		if message ~= nil then 
			nexus:startsearch( message.callsign, 
				-- on player connected
				function( contact )  
					pprint( "Hey, found a gamer: " .. contact.profile.callsign )
					display( self, nexus:filter() )
				end,
				-- on player disconnected
				function( contact )  
					pprint( "Lost a gamer: " .. contact.profile.callsign )
					
					clearCheckboxes( self.form )
					local contacts = nexus:filter()
					contacts[ contact:id() ] = nil
					display( self, contacts )
				end			
			)
			
			self.form:addLabel( "callsign", 50, 550, 500, 40, nil, message.callsign .. ", select your co-players:" )
			self.form:addButton( "play", 750, 550, 200, 48, function() 
				pprint( "Clicked start game button...!" ) 
				local profiles = getCheckedProfiles( self )
				
				pprint( "-- Profiles selected -----------" )
				pprint( profiles )
				pprint( "--------------------------------" )

				nexus:startpropose( profiles, function() 
					pprint( "Going to load playground, stop search, stop proposal." )
					
					nexus:stopsearch()
					nexus:stoppropose()
					
					msg.post( "main:/screenmaster", "load", {
						level = "playground"
					})
				end )
				
			end, "Start Game" )
		end
	end
end


function update( self, dt )
	if nexus then nexus:update( dt ) end
end


function on_input( self, action_id, action )
	if self.form then self.form:input( self, action_id, action ) end 
end



