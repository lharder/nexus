local defgui = require( "defgui.defgui" )
local Contact = require( "nexus.contact" )
local Localhost = require( "nexus.localhost" )
local Beacon = require( "nexus.beacon" )
local Matcher = require( "nexus.matcher" )

local MSG_SCREEN_LOADED = hash( "screenmaster:loaded" )


local function display( self, contacts )
	local x = 50
	local y = 450

	-- display a checkbox for each callsign
	local me = self.beacon:me()
	for i, contact in ipairs( contacts ) do
		-- does a checkbox exist already?
		local checkbox = self.form.fields[ contact.callsign ] 
		if checkbox == nil then
			checkbox = self.form:addCheckbox( contact.callsign, x, y, function( guiSelf, field, action_id, action ) 
				if field.caption == me.callsign then
					pprint( "That is myself! Cannot play without me....!" ) 
					field:check( true )
				end
			end, 
			contact.callsign )
			checkbox:check( true )
		end

		-- calculate new position
		x = x + 240
		if x > 900 then
			x = 50
			y = y - 50
		end
	end
end

local function getCheckedCallsigns( self )
	local callsigns = {}
	for id, field in pairs( self.form.fields ) do
		-- only checkboxes have this method...
		if field.isChecked and field:isChecked() then
			table.insert( callsigns, field.caption )
		end
	end
	return callsigns
end

local function getCheckedContacts( self )
	local callsigns = getCheckedCallsigns( self )
	local checkedcontacts = {}
	for i, contact in ipairs( self.contacts ) do
		if contains( callsigns, contact.callsign ) then 
			table.insert( checkedcontacts, contact )
		end
	end
	return checkedcontacts
end


-- methods -----------------------
function init( self )
	msg.post( ".", "acquire_input_focus" )
	msg.post( "@render:", "use_fixed_fit_projection", { near = -1, far = 1 } )

	self.contacts = {}
	
	self.form = defgui.createForm( "callsigns", { 
		button = "button/root",  
		checkbox = "checkbox/root",  
		label = "label/root",
	})

end



function on_message( self, message_id, message, sender )
	if message_id == MSG_SCREEN_LOADED then
		-- receive the player's callsign from the previous screen
		-- use it to start broadcasting and searching for peers
		if message ~= nil then 
			-- create beacon to find other players
			self.beacon = Beacon.new( "MyGame", message.callsign, function( other )
				if other == nil then return end
				pprint( "Found contact: " .. other.callsign .. " (" .. other.ip .. ")" )

				-- new contact found, remember
				table.insert( self.contacts, other )
				display( self, self.contacts )
			end )

			self.form:addLabel( "callsign", 50, 550, 500, 40, nil, message.callsign .. ", select your co-players:" )
			self.form:addButton( "play", 750, 550, 200, 48, function() 
				pprint( "Clicked start button...!" ) 
				
				-- my local contact info
				self.mycontact = self.beacon:me()
				self.others = self.beacon:others()

				-- negotiate a common set of players for a game
				if self.matcher == nil then 
					self.matcher = Matcher.new( self.mycontact ) 
				end
				
				local checkedcontacts = getCheckedContacts( self )
				self.matcher:propose( checkedcontacts, function( mastercontact ) 
					pprint( "All selected players confirmed, let's rock!!!" )

					-- stop searching
					self.beacon:destroy()
					
					local messages = {}
					messages[ "playground:/puppeteer" ] = { 
						mycontact = self.mycontact, 
						mastercontact = mastercontact,
						others = self.others 
					}

					msg.post( "main:/screenmaster", "load", {
						level = "/playground",  messages = messages
					})
				end )
			end, "Start" )
		end
	end
end


function update( self, dt )
	if self.beacon then self.beacon:update() end
	if self.matcher then self.matcher:update() end
end


function on_input( self, action_id, action )
	if self.form then self.form:input( self, action_id, action ) end 
end



