local defgui = require( "defgui.defgui" )
local nexus = require( "main.gameserver" )

local MSG_SCREEN_LOADED = hash( "screenmaster:loaded" )

local x = 50
local y = 490


local function clearCheckboxes( form )
	if form == nil then return end 
	
	for ipPort, contact in pairs( nexus.contacts ) do
		form:remove( ipPort )
	end
	x = 50
	y = 450
end


local function display( self, contacts )
	-- display a checkbox for each callsign
	local me = nexus:me()
	for ipPort, contact in pairs( contacts ) do
		local callsign = contact.profile.callsign 

		-- does a checkbox exist already? Have we received profile info already?
		-- At first, only ip:port are known: must not display checkbox yet.
		local checkbox = self.form.fields[ ipPort ] 
		if checkbox == nil and ( callsign ~= nil ) then
			checkbox = self.form:addCheckbox( ipPort, x, y, function( guiSelf, field, action_id, action ) 
				if field.caption == me.profile.callsign then
					pprint( "That is myself! Cannot play without me....!" ) 
					field:check( true )
				end
			end, 
			callsign )
			
			checkbox:check( true )
			checkbox.profile = contact.profile
			checkbox.ipPort = ipPort

			-- calculate new position
			x = x + 240
			if x > 900 then
				x = 50
				y = y - 50
			end
		end
	end
end


local function getCheckedProfiles( self )
	local profiles = {}
	for id, field in pairs( self.form.fields ) do
		-- only checkboxes have this method...
		if field.isChecked and field:isChecked() then
			profiles[ field.ipPort ] = field.profile
		end
	end
	return profiles
end


local function startsearch( self, callsign, params, matchkey )
	nexus:startsearch( callsign, params,
		-- on player connected
		function( contact ) 
			-- ignore new discoveries if in a game already
			pprint( "Hey, found a gamer: " .. contact.profile.callsign )
			if nexus:isPlaying() then 
				-- should check if pause is active, etc..... 
				-- here is demo only ;o)
				nexus:triggerEvent( "unpause", { 
					causedby = contact.profile 
				})
			else
				display( self, nexus:filter() )
			end
		end,

		-- on player disconnected
		function( contact )  
			pprint( "Lost a gamer: " .. contact.profile.callsign )
			if nexus:isPlaying() then 
				-- while playing
				pprint( "Must pause game! Trigger global event!" )
				nexus:triggerEvent( "pause", { 
					causedby = contact.profile 
				})
			else
				-- while searching and proposing
				clearCheckboxes( self.form )
				local contacts = nexus:filter()
				contacts[ contact:id() ] = nil
				display( self, contacts )
			end
		end,
					
	matchkey )
end



-- methods -----------------------
function init( self )
	msg.post( ".", "acquire_input_focus" )
	msg.post( "@render:", "use_fixed_fit_projection", { near = -1, far = 1 } )

	self.form = defgui.createForm( "callsigns", { 
		button = "button/root",  
		checkbox = "checkbox/root",  
		label = "label/root",
		txtfield = "txtfield/root"
	})
	
	self.form.remove = function( self, id ) 
		local field = self.fields[ id ]
		if field then 
			gui.delete_node( field.rootNode )
			self.fields[ id ] = nil
		end
	end


	self.form:addLabel( "hint", 50, 380, 800, 60, function() 
		if self.matchkeyfield == nil then 
			self.matchkeyfield = self.form:addTextField( "matchkey", 50, 350, 330, 36, nil )
			self.matchkeyfield:setText( "choose a name" )

			self.matchkeyOk = self.form:addButton( "matchkeyOk", 390, 350, 120, 36, function() 
				local profile = nexus:me().profile
				startsearch( self, profile.callsign, profile, self.matchkeyfield.value )
				gui.hide_keyboard()
			end, "Join match" )
		end
		gui.show_keyboard( gui.KEYBOARD_TYPE_DEFAULT, false )
	end, "> Looking for friends not showing up here?" )
	
end


function on_message( self, message_id, message, sender )
	if message_id == MSG_SCREEN_LOADED then
		-- receive the player's callsign from the previous screen
		-- use it to start broadcasting and searching for peers
		if message ~= nil then 
			startsearch( self, message.callsign, message.params )
			
			self.form:addLabel( "callsign", 50, 550, 500, 40, nil, message.callsign .. ", select your co-players:" )
			self.form:addButton( "play", 750, 550, 200, 48, function() 
				pprint( "Clicked start game button...!" ) 
				
				local profiles = getCheckedProfiles( self )
				nexus:startpropose( profiles, function() 
					pprint( "Going to load playground, stop search, stop proposal." )
					
					nexus:stopsearch()
					nexus:stoppropose()
					
					msg.post( "main:/screenmaster", "load", {
						level = "playground"
					})
				end )

			end, "Start Game" )
		end
	end
end


function update( self, dt )
	if nexus then nexus:update( dt ) end
end


function on_input( self, action_id, action )
	if self.form then self.form:input( self, action_id, action ) end 
end


function final( self )
	msg.post( ".", "release_input_focus" )
end


